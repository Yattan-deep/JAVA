wrapper class


In Java, a wrapper class is a class that wraps or encapsulates a primitive data type. Wrapper classes are used to convert primitive data types into objects, allowing them to be used in situations where objects are required.

Why do we need wrapper classes?

In Java, primitive data types (such as int, double, boolean, etc.) are not objects, and therefore, they cannot be used in situations where objects are required, such as:

In collections (e.g., ArrayList, HashSet, etc.)
As method parameters or return types
As keys or values in a HashMap
To overcome this limitation, Java provides wrapper classes that can wrap primitive data types into objects.

Java Wrapper Classes:

Here are the wrapper classes for each primitive data type in Java:

Byte - wraps a byte value
Short - wraps a short value
Integer - wraps an int value
Long - wraps a long value
Float - wraps a float value
Double - wraps a double value
Boolean - wraps a boolean value
Character - wraps a char value
How to use wrapper classes:

You can use wrapper classes in several ways:

Autoboxing: Java automatically converts primitive data types to their corresponding wrapper classes when needed. For example:
Edit
Copy code
List<Integer> list = new ArrayList<>();
list.add(10); // autoboxing: int -> Integer
Manual wrapping: You can manually create a wrapper object using the constructor of the wrapper class. For example:
Edit
Copy code
Integer i = new Integer(10);
Unboxing: Java automatically converts wrapper classes to their corresponding primitive data types when needed. For example:
Edit
Copy code
Integer i = new Integer(10);
int x = i; // unboxing: Integer -> int
Benefits of wrapper classes:

Object-oriented programming: Wrapper classes allow primitive data types to be treated as objects, enabling object-oriented programming.
Type safety: Wrapper classes provide type safety, ensuring that the correct type of data is used in a particular context.
Flexibility: Wrapper classes provide flexibility in programming, allowing primitive data types to be used in situations where objects are required.
Common methods of wrapper classes:

Each wrapper class provides several useful methods, including:

valueOf(): Returns a wrapper object with the specified value.
parseXXX(): Parses a string into a primitive data type (e.g., Integer.parseInt()).
toString(): Returns a string representation of the wrapper object.
compareTo(): Compares two wrapper objects.
In summary, wrapper classes are an essential part of Java programming, allowing primitive data types to be treated as objects and providing type safety, flexibility, and convenience in programming.